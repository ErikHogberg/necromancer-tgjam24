[gd_scene load_steps=17 format=3 uid="uid://cg0lwr63age0v"]

[ext_resource type="Texture2D" uid="uid://c18busabi562l" path="res://gfx/Evil Wizard 3/Sprites/Run.png" id="1_p6elb"]

[sub_resource type="GDScript" id="GDScript_am0de"]
script/source = "extends Node3D
class_name Tiler

@export var Tile: StaticBody3D
@export var tilingSize: Vector2 = Vector2(100,100)
@export var tilingDistance: float = 150
@export var tilingOffset: Vector2 = Vector2(0,0)

var tiles: Array[StaticBody3D] = []
var currentCenterTileIndex = 5

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	tiles.resize(9)
	tiles[0]=Tile
	for n in 8:
		tiles[n+1] = Tile.duplicate(DuplicateFlags.DUPLICATE_USE_INSTANTIATION)
		add_child(tiles[n+1])
	
	for x in 3:
		for y in 3:
			var i = 3*y+x
			tiles[i].position = Vector3(tilingSize.x * x, 0, tilingSize.y*y)
	
	
func update_pos(_pos: Vector3):
	# todo: compare pos to center of current center tile (offset by tilingOffset), move some tiles and change center index if pos is too close to edge
	pass
"

[sub_resource type="BoxShape3D" id="BoxShape3D_q4vtr"]
size = Vector3(100, 20, 100)

[sub_resource type="Gradient" id="Gradient_ji2rm"]
colors = PackedColorArray(0.0463413, 0.164075, 0.204398, 1, 2.28621e-07, 0.351841, 0.211535, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2uepw"]
noise_type = 0
fractal_type = 3
domain_warp_enabled = true

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5csxy"]
color_ramp = SubResource("Gradient_ji2rm")
noise = SubResource("FastNoiseLite_2uepw")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3pkho"]
disable_fog = true
albedo_texture = SubResource("NoiseTexture2D_5csxy")

[sub_resource type="QuadMesh" id="QuadMesh_tn8qn"]
material = SubResource("StandardMaterial3D_3pkho")
size = Vector2(100, 100)

[sub_resource type="GDScript" id="GDScript_jlvf1"]
script/source = "extends Node3D
class_name PlayerController

const SPEED = 0.8
const JUMP_VELOCITY = 2.0
const GRAVITY = 9.80

@export var DirRef: Node3D

var velocity: Vector3 = Vector3.ZERO
var resetPos: Vector3
var wasLeft = false

signal on_move(pos: Vector2)
signal on_flip(left: bool)


func is_on_floor() -> bool:
	return global_position.y < 0.01

func _ready() -> void:
	resetPos = global_position

func _process(delta: float) -> void:
	
	if Input.is_action_just_pressed(\"quit\"):
		get_tree().quit()
		return
		
	if Input.is_action_just_pressed(\"reset player\"):
		global_position = resetPos
	
	# Add the gravity.
	if not is_on_floor():
		velocity += Vector3.DOWN*(GRAVITY * delta)

	# Handle jump.
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	var input_dir := Input.get_vector(\"a\", \"d\", \"w\", \"s\")
	if abs(input_dir.x) > 0.1 && (input_dir.x < 0) != wasLeft:
		wasLeft = !wasLeft
		on_flip.emit(wasLeft)
	
	var basis = transform.basis
	if DirRef:
		#direction = direction.rotated(DirRef.global_position.signed_angle_to(global_position, Vector3.DOWN))
		basis = DirRef.global_basis
		
	var direction := (basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)
	
	global_position += velocity;
	if global_position.y < 0: global_position.y = 0
	
	on_move.emit(Vector2(global_position.x,global_position.z))
"

[sub_resource type="Animation" id="Animation_t3tpp"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_je5x1"]
resource_name = "run"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = false
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.889),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0, 7]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_3ukah"]
_data = {
"RESET": SubResource("Animation_t3tpp"),
"run": SubResource("Animation_je5x1")
}

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_bpj4x"]
sky_curve = 0.47075
ground_bottom_color = Color(0.34375, 0.449436, 0.279994, 1)

[sub_resource type="Sky" id="Sky_bwetu"]
sky_material = SubResource("ProceduralSkyMaterial_bpj4x")

[sub_resource type="Environment" id="Environment_3gvms"]
background_mode = 2
sky = SubResource("Sky_bwetu")

[sub_resource type="GDScript" id="GDScript_1mlub"]
script/source = "extends Camera3D
class_name PlayerCam

@export var YawParent: Node3D
@export var PitchParent: Node3D

@export var YawPitchSpeed: Vector2 = Vector2(0.5,0.5)
@export var StickYawPitchSpeed: Vector2 = Vector2(5,3)
@export var ZoomSpeed: float = 0.1

@export var PitchMinMax = Vector2(-80,80)
@export var ZoomMinMax = Vector2(-30,100)

@export var Follow: Node3D
@export var FollowSpeed: float = 1

var yaw =0
var pitch =0
var zoom = 0

var rightDown=false

func _ready() -> void:
	zoom = position.z
	yaw = YawParent.rotation.y
	pitch = PitchParent.rotation.x

func _input(event):
	# Mouse in viewport coordinates.
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_RIGHT:
			rightDown= event.pressed
			if rightDown:
				Input.mouse_mode=Input.MOUSE_MODE_CONFINED_HIDDEN
			else:
				Input.mouse_mode=Input.MOUSE_MODE_VISIBLE
				
		elif event.button_index == MOUSE_BUTTON_WHEEL_UP:
			zoom-=ZoomSpeed
			zoom = maxf(zoom, ZoomMinMax.x)
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			zoom+=ZoomSpeed
			zoom = minf(zoom, ZoomMinMax.y)
			
	elif event is InputEventMouseMotion && rightDown:
		yaw += event.relative.x*YawPitchSpeed.x*0.01
		pitch += event.relative.y*YawPitchSpeed.y*0.01
		pitch = maxf(pitch, deg_to_rad(PitchMinMax.x))
		pitch = minf(pitch, deg_to_rad(PitchMinMax.y))


func _process(delta: float) -> void:
	if Follow:
		YawParent.global_position = YawParent.global_position.move_toward(Follow.global_position, FollowSpeed*delta)
	
	var stick := Input.get_vector(\"yaw right\", \"yaw left\", \"pitch up\", \"pitch down\")
	yaw += stick.x * StickYawPitchSpeed.x*delta
	if abs(stick.y) > .3:
		pitch += stick.y * StickYawPitchSpeed.y*delta
		pitch = minf(maxf(pitch, deg_to_rad(PitchMinMax.x)), deg_to_rad(PitchMinMax.y))
	
	position.z = zoom
	# todo: lerp towards target using curve
	YawParent.rotation.y = yaw
	PitchParent.rotation.x = pitch
	
"

[node name="World" type="Node3D"]

[node name="BG" type="Node3D" parent="." node_paths=PackedStringArray("Tile")]
script = SubResource("GDScript_am0de")
Tile = NodePath("Tile")
tilingSize = Vector2(101, 101)

[node name="Tile" type="StaticBody3D" parent="BG"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="BG/Tile"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -10, 0)
shape = SubResource("BoxShape3D_q4vtr")

[node name="MeshInstance3D" type="MeshInstance3D" parent="BG/Tile"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("QuadMesh_tn8qn")

[node name="Player" type="Node3D" parent="." node_paths=PackedStringArray("DirRef")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
script = SubResource("GDScript_jlvf1")
DirRef = NodePath("../Cam Yaw")

[node name="Sprite3D" type="Sprite3D" parent="Player"]
transform = Transform3D(10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 2, 0)
cast_shadow = 0
gi_mode = 0
billboard = 2
texture_filter = 0
texture = ExtResource("1_p6elb")
hframes = 8

[node name="AnimationPlayer" type="AnimationPlayer" parent="Player/Sprite3D"]
libraries = {
"": SubResource("AnimationLibrary_3ukah")
}
autoplay = "run"
speed_scale = 6.0

[node name="Cam Yaw" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.06615, 10.4074, 12.4275)

[node name="Cam Pitch" type="Node3D" parent="Cam Yaw"]
transform = Transform3D(1, 0, 0, 0, 0.610145, 0.79229, 0, -0.79229, 0.610145, 0, 8.33149, 0)

[node name="Camera3D" type="Camera3D" parent="Cam Yaw/Cam Pitch" node_paths=PackedStringArray("YawParent", "PitchParent", "Follow")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 25.4999)
environment = SubResource("Environment_3gvms")
script = SubResource("GDScript_1mlub")
YawParent = NodePath("../..")
PitchParent = NodePath("..")
ZoomSpeed = 9.0
Follow = NodePath("../../../Player")
FollowSpeed = 99.0

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.848697, 0.441501, -0.291189, 0.252847, 0.144871, 0.956599, 0.464524, -0.885488, 0.0113199, 1.21989, 187.753, 0)

[connection signal="on_flip" from="Player" to="Player/Sprite3D" method="set_flip_h"]
